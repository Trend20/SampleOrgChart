{"ast":null,"code":"import _objectSpread from \"/home/devenock/Desktop/projects/chRTS/react-orgchart/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/devenock/Desktop/projects/chRTS/react-orgchart/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/devenock/Desktop/projects/chRTS/react-orgchart/src/edit-chart/edit-chart.js\";\nimport React, { useRef, useState } from \"react\";\nimport JSONDigger from \"json-digger\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport OrganizationChart from \"../components/ChartContainer\";\nimport \"./edit-chart.css\";\n\nconst EditChart = () => {\n  const orgchart = useRef();\n  const datasource = {\n    id: \"n1\",\n    name: \"Lao Lao\",\n    title: \"general manager\",\n    children: [{\n      id: \"n2\",\n      name: \"Bo Miao\",\n      title: \"department manager\"\n    }, {\n      id: \"n3\",\n      name: \"Su Miao\",\n      title: \"department manager\",\n      children: [{\n        id: \"n4\",\n        name: \"Tie Hua\",\n        title: \"senior engineer\"\n      }, {\n        id: \"n5\",\n        name: \"Hei Hei\",\n        title: \"senior engineer\",\n        children: [{\n          id: \"n6\",\n          name: \"Dan Dan\",\n          title: \"engineer\"\n        }, {\n          id: \"n7\",\n          name: \"Xiang Xiang\",\n          title: \"engineer\"\n        }]\n      }, {\n        id: \"n8\",\n        name: \"Pang Pang\",\n        title: \"senior engineer\"\n      }]\n    }, {\n      id: \"n9\",\n      name: \"Hong Miao\",\n      title: \"department manager\"\n    }, {\n      id: \"n10\",\n      name: \"Chun Miao\",\n      title: \"department manager\",\n      children: [{\n        id: \"n11\",\n        name: \"Yue Yue\",\n        title: \"senior engineer\"\n      }]\n    }]\n  };\n\n  const _useState = useState(datasource),\n        _useState2 = _slicedToArray(_useState, 2),\n        ds = _useState2[0],\n        setDS = _useState2[1];\n\n  const dsDigger = new JSONDigger(ds, \"id\", \"children\");\n\n  const _useState3 = useState(new Set()),\n        _useState4 = _slicedToArray(_useState3, 2),\n        selectedNodes = _useState4[0],\n        setSelectedNodes = _useState4[1];\n\n  const _useState5 = useState([{\n    name: \"\",\n    title: \"\"\n  }]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        newNodes = _useState6[0],\n        setNewNodes = _useState6[1];\n\n  const _useState7 = useState(true),\n        _useState8 = _slicedToArray(_useState7, 2),\n        isEditMode = _useState8[0],\n        setIsEditMode = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        isMultipleSelect = _useState10[0],\n        setIsMultipleSelect = _useState10[1];\n\n  const readSelectedNode = nodeData => {\n    if (isMultipleSelect) {\n      setSelectedNodes(prev => new Set(prev.add(nodeData)));\n    } else {\n      setSelectedNodes(new Set([nodeData]));\n    }\n  };\n\n  const clearSelectedNode = () => {\n    setSelectedNodes(new Set());\n  };\n\n  const onNameChange = (e, index) => {\n    newNodes[index].name = e.target.value;\n    setNewNodes([...newNodes]);\n  };\n\n  const onTitleChange = (e, index) => {\n    newNodes[index].title = e.target.value;\n    setNewNodes([...newNodes]);\n  };\n\n  const addNewNode = () => {\n    setNewNodes(prevNewNodes => [...prevNewNodes, {\n      name: \"\",\n      title: \"\"\n    }]);\n  };\n\n  const removeNewNode = index => {\n    setNewNodes(prevNewNodes => {\n      prevNewNodes.splice(index, 1);\n      return [...prevNewNodes];\n    });\n  };\n\n  const getNewNodes = () => {\n    const nodes = [];\n\n    for (const node of newNodes) {\n      nodes.push(_objectSpread({}, node, {\n        id: uuidv4()\n      }));\n    }\n\n    return nodes;\n  };\n\n  const addChildNodes = async () => {\n    await dsDigger.addChildren([...selectedNodes][0].id, getNewNodes());\n    setDS(_objectSpread({}, dsDigger.ds));\n  };\n\n  const addSiblingNodes = async () => {\n    await dsDigger.addSiblings([...selectedNodes][0].id, getNewNodes());\n    setDS(_objectSpread({}, dsDigger.ds));\n  };\n\n  const addRootNode = () => {\n    dsDigger.addRoot(getNewNodes()[0]);\n    setDS(_objectSpread({}, dsDigger.ds));\n  };\n\n  const remove = async () => {\n    await dsDigger.removeNodes([...selectedNodes].map(node => node.id));\n    setDS(_objectSpread({}, dsDigger.ds));\n    setSelectedNodes(new Set());\n  };\n\n  const onMultipleSelectChange = e => {\n    setIsMultipleSelect(e.target.checked);\n  };\n\n  const onModeChange = e => {\n    setIsEditMode(e.target.checked);\n\n    if (e.target.checked) {\n      orgchart.current.expandAllNodes();\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"edit-chart-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(\"section\", {\n    className: \"toolbar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"selected-nodes\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    style: {\n      display: \"inline-block\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, \"Selected Node\"), React.createElement(\"input\", {\n    style: {\n      marginLeft: \"1rem\"\n    },\n    id: \"cb-multiple-select\",\n    type: \"checkbox\",\n    checked: isMultipleSelect,\n    onChange: onMultipleSelectChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"cb-multiple-select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, \"Multiple Select\")), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, Array.from(selectedNodes).map(node => React.createElement(\"li\", {\n    key: node.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, node.name, \" - \", node.title)))), React.createElement(\"div\", {\n    className: \"new-nodes\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, \"New Nodes\"), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, newNodes && newNodes.map((node, index) => React.createElement(\"li\", {\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"name\",\n    value: node.name,\n    onChange: e => onNameChange(e, index),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"title\",\n    value: node.title,\n    onChange: e => onTitleChange(e, index),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }), newNodes.length === 1 || index === newNodes.length - 1 ? React.createElement(\"button\", {\n    disabled: !isEditMode,\n    onClick: addNewNode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, \"+\") : React.createElement(\"button\", {\n    disabled: !isEditMode,\n    onClick: () => removeNewNode(index),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, \"-\"))))), React.createElement(\"div\", {\n    className: \"action-buttons\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    disabled: !isEditMode,\n    onClick: addChildNodes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, \"Add Child Nodes\"), React.createElement(\"button\", {\n    disabled: !isEditMode,\n    onClick: addSiblingNodes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, \"Add Sibling Nodes\"), React.createElement(\"button\", {\n    disabled: !isEditMode,\n    onClick: addRootNode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, \"Add Root Node\"), React.createElement(\"button\", {\n    disabled: !isEditMode,\n    onClick: remove,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, \"Remove Nodes\"), React.createElement(\"input\", {\n    style: {\n      marginLeft: \"1rem\"\n    },\n    id: \"cb-mode\",\n    type: \"checkbox\",\n    checked: isEditMode,\n    onChange: onModeChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"cb-mode\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, \"Edit Mode\"))), React.createElement(OrganizationChart, {\n    ref: orgchart,\n    datasource: ds,\n    collapsible: !isEditMode,\n    multipleSelect: isMultipleSelect,\n    onClickNode: readSelectedNode,\n    onClickChart: clearSelectedNode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }));\n};\n\nexport default EditChart;","map":{"version":3,"sources":["/home/devenock/Desktop/projects/chRTS/react-orgchart/src/edit-chart/edit-chart.js"],"names":["React","useRef","useState","JSONDigger","v4","uuidv4","OrganizationChart","EditChart","orgchart","datasource","id","name","title","children","ds","setDS","dsDigger","Set","selectedNodes","setSelectedNodes","newNodes","setNewNodes","isEditMode","setIsEditMode","isMultipleSelect","setIsMultipleSelect","readSelectedNode","nodeData","prev","add","clearSelectedNode","onNameChange","e","index","target","value","onTitleChange","addNewNode","prevNewNodes","removeNewNode","splice","getNewNodes","nodes","node","push","addChildNodes","addChildren","addSiblingNodes","addSiblings","addRootNode","addRoot","remove","removeNodes","map","onMultipleSelectChange","checked","onModeChange","current","expandAllNodes","display","marginLeft","Array","from","length"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport JSONDigger from \"json-digger\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport OrganizationChart from \"../components/ChartContainer\";\nimport \"./edit-chart.css\";\n\nconst EditChart = () => {\n  const orgchart = useRef();\n  const datasource = {\n    id: \"n1\",\n    name: \"Lao Lao\",\n    title: \"general manager\",\n    children: [\n      { id: \"n2\", name: \"Bo Miao\", title: \"department manager\" },\n      {\n        id: \"n3\",\n        name: \"Su Miao\",\n        title: \"department manager\",\n        children: [\n          { id: \"n4\", name: \"Tie Hua\", title: \"senior engineer\" },\n          {\n            id: \"n5\",\n            name: \"Hei Hei\",\n            title: \"senior engineer\",\n            children: [\n              { id: \"n6\", name: \"Dan Dan\", title: \"engineer\" },\n              { id: \"n7\", name: \"Xiang Xiang\", title: \"engineer\" }\n            ]\n          },\n          { id: \"n8\", name: \"Pang Pang\", title: \"senior engineer\" }\n        ]\n      },\n      { id: \"n9\", name: \"Hong Miao\", title: \"department manager\" },\n      {\n        id: \"n10\",\n        name: \"Chun Miao\",\n        title: \"department manager\",\n        children: [{ id: \"n11\", name: \"Yue Yue\", title: \"senior engineer\" }]\n      }\n    ]\n  };\n  const [ds, setDS] = useState(datasource);\n  const dsDigger = new JSONDigger(ds, \"id\", \"children\");\n\n  const [selectedNodes, setSelectedNodes] = useState(new Set());\n  const [newNodes, setNewNodes] = useState([{ name: \"\", title: \"\" }]);\n  const [isEditMode, setIsEditMode] = useState(true);\n  const [isMultipleSelect, setIsMultipleSelect] = useState(false);\n\n  const readSelectedNode = nodeData => {\n    if (isMultipleSelect) {\n      setSelectedNodes(prev => new Set(prev.add(nodeData)));\n    } else {\n      setSelectedNodes(new Set([nodeData]));\n    }\n  };\n\n  const clearSelectedNode = () => {\n    setSelectedNodes(new Set());\n  };\n\n  const onNameChange = (e, index) => {\n    newNodes[index].name = e.target.value;\n    setNewNodes([...newNodes]);\n  };\n\n  const onTitleChange = (e, index) => {\n    newNodes[index].title = e.target.value;\n    setNewNodes([...newNodes]);\n  };\n\n  const addNewNode = () => {\n    setNewNodes(prevNewNodes => [...prevNewNodes, { name: \"\", title: \"\" }]);\n  };\n\n  const removeNewNode = index => {\n    setNewNodes(prevNewNodes => {\n      prevNewNodes.splice(index, 1);\n      return [...prevNewNodes];\n    });\n  };\n\n  const getNewNodes = () => {\n    const nodes = [];\n    for (const node of newNodes) {\n      nodes.push({ ...node, id: uuidv4() });\n    }\n    return nodes;\n  };\n\n  const addChildNodes = async () => {\n    await dsDigger.addChildren([...selectedNodes][0].id, getNewNodes());\n    setDS({ ...dsDigger.ds });\n  };\n\n  const addSiblingNodes = async () => {\n    await dsDigger.addSiblings([...selectedNodes][0].id, getNewNodes());\n    setDS({ ...dsDigger.ds });\n  };\n\n  const addRootNode = () => {\n    dsDigger.addRoot(getNewNodes()[0]);\n    setDS({ ...dsDigger.ds });\n  };\n\n  const remove = async () => {\n    await dsDigger.removeNodes([...selectedNodes].map(node => node.id));\n    setDS({ ...dsDigger.ds });\n    setSelectedNodes(new Set());\n  };\n\n  const onMultipleSelectChange = e => {\n    setIsMultipleSelect(e.target.checked);\n  };\n\n  const onModeChange = e => {\n    setIsEditMode(e.target.checked);\n    if (e.target.checked) {\n      orgchart.current.expandAllNodes();\n    }\n  };\n\n  return (\n    <div className=\"edit-chart-wrapper\">\n      <section className=\"toolbar\">\n        <div className=\"selected-nodes\">\n          <div>\n            <h4 style={{ display: \"inline-block\" }}>Selected Node</h4>\n            <input\n              style={{ marginLeft: \"1rem\" }}\n              id=\"cb-multiple-select\"\n              type=\"checkbox\"\n              checked={isMultipleSelect}\n              onChange={onMultipleSelectChange}\n            />\n            <label htmlFor=\"cb-multiple-select\">Multiple Select</label>\n          </div>\n          <ul>\n            {Array.from(selectedNodes).map(node => (\n              <li key={node.id}>\n                {node.name} - {node.title}\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div className=\"new-nodes\">\n          <h4>New Nodes</h4>\n          <ul>\n            {newNodes &&\n              newNodes.map((node, index) => (\n                <li key={index}>\n                  <input\n                    type=\"text\"\n                    placeholder=\"name\"\n                    value={node.name}\n                    onChange={e => onNameChange(e, index)}\n                  />\n                  <input\n                    type=\"text\"\n                    placeholder=\"title\"\n                    value={node.title}\n                    onChange={e => onTitleChange(e, index)}\n                  />\n                  {newNodes.length === 1 || index === newNodes.length - 1 ? (\n                    <button disabled={!isEditMode} onClick={addNewNode}>\n                      +\n                    </button>\n                  ) : (\n                    <button\n                      disabled={!isEditMode}\n                      onClick={() => removeNewNode(index)}\n                    >\n                      -\n                    </button>\n                  )}\n                </li>\n              ))}\n          </ul>\n        </div>\n        <div className=\"action-buttons\">\n          <button disabled={!isEditMode} onClick={addChildNodes}>\n            Add Child Nodes\n          </button>\n          <button disabled={!isEditMode} onClick={addSiblingNodes}>\n            Add Sibling Nodes\n          </button>\n          <button disabled={!isEditMode} onClick={addRootNode}>\n            Add Root Node\n          </button>\n          <button disabled={!isEditMode} onClick={remove}>\n            Remove Nodes\n          </button>\n          <input\n            style={{ marginLeft: \"1rem\" }}\n            id=\"cb-mode\"\n            type=\"checkbox\"\n            checked={isEditMode}\n            onChange={onModeChange}\n          />\n          <label htmlFor=\"cb-mode\">Edit Mode</label>\n        </div>\n      </section>\n      <OrganizationChart\n        ref={orgchart}\n        datasource={ds}\n        collapsible={!isEditMode}\n        multipleSelect={isMultipleSelect}\n        onClickNode={readSelectedNode}\n        onClickChart={clearSelectedNode}\n      />\n    </div>\n  );\n};\n\nexport default EditChart;\n"]},"metadata":{},"sourceType":"module"}
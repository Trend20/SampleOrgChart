{"ast":null,"code":"import _objectSpread from \"/home/devenock/Desktop/projects/chRTS/react-orgchart/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/devenock/Desktop/projects/chRTS/react-orgchart/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/devenock/Desktop/projects/chRTS/react-orgchart/src/edit-node/edit-node.js\";\nimport React, { useRef, useState } from \"react\";\nimport JSONDigger from \"json-digger\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport OrganizationChart from \"../components/ChartContainer\";\nimport \"./edit-node.css\";\n\nconst EditNode = () => {\n  const orgchart = useRef();\n  const datasource = {\n    id: \"n1\",\n    name: \"Lao Lao\",\n    title: \"general manager\",\n    children: [{\n      id: \"n2\",\n      name: \"Bo Miao\",\n      title: \"department manager\"\n    }, {\n      id: \"n3\",\n      name: \"Su Miao\",\n      title: \"department manager\",\n      children: [{\n        id: \"n4\",\n        name: \"Tie Hua\",\n        title: \"senior engineer\"\n      }, {\n        id: \"n5\",\n        name: \"Hei Hei\",\n        title: \"senior engineer\",\n        children: [{\n          id: \"n6\",\n          name: \"Dan Dan\",\n          title: \"engineer\"\n        }, {\n          id: \"n7\",\n          name: \"Xiang Xiang\",\n          title: \"engineer\"\n        }]\n      }, {\n        id: \"n8\",\n        name: \"Pang Pang\",\n        title: \"senior engineer\"\n      }]\n    }, {\n      id: \"n9\",\n      name: \"Hong Miao\",\n      title: \"department manager\"\n    }, {\n      id: \"n10\",\n      name: \"Chun Miao\",\n      title: \"department manager\",\n      children: [{\n        id: \"n11\",\n        name: \"Yue Yue\",\n        title: \"senior engineer\"\n      }]\n    }]\n  };\n\n  const _useState = useState(datasource),\n        _useState2 = _slicedToArray(_useState, 2),\n        ds = _useState2[0],\n        setDS = _useState2[1];\n\n  const dsDigger = new JSONDigger(ds, \"id\", \"children\");\n\n  const _useState3 = useState(new Set()),\n        _useState4 = _slicedToArray(_useState3, 2),\n        selectedNodes = _useState4[0],\n        setSelectedNodes = _useState4[1];\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        newNodeName = _useState6[0],\n        setNewNodeName = _useState6[1];\n\n  const _useState7 = useState(\"\"),\n        _useState8 = _slicedToArray(_useState7, 2),\n        newNodeTitle = _useState8[0],\n        setNewNodeTitle = _useState8[1];\n\n  const _useState9 = useState(true),\n        _useState10 = _slicedToArray(_useState9, 2),\n        isEditMode = _useState10[0],\n        setIsEditMode = _useState10[1];\n\n  const _useState11 = useState(false),\n        _useState12 = _slicedToArray(_useState11, 2),\n        isMultipleSelect = _useState12[0],\n        setIsMultipleSelect = _useState12[1];\n\n  const readSelectedNode = nodeData => {\n    if (isMultipleSelect) {\n      setSelectedNodes(prev => new Set(prev.add(nodeData)));\n    } else {\n      setSelectedNodes(new Set([nodeData]));\n    }\n  };\n\n  const clearSelectedNode = () => {\n    setSelectedNodes(new Set());\n  };\n\n  const onNameChange = e => {\n    setNewNodeName(e.target.value);\n  };\n\n  const onTitleChange = e => {\n    setNewNodeTitle(e.target.value);\n  };\n\n  const updateNodes = async () => {\n    await dsDigger.updateNodes([...selectedNodes].map(node => node.id), {\n      id: uuidv4(),\n      name: newNodeName,\n      title: newNodeTitle\n    });\n    setDS(_objectSpread({}, dsDigger.ds));\n  };\n\n  const onMultipleSelectChange = e => {\n    setIsMultipleSelect(e.target.checked);\n  };\n\n  const onModeChange = e => {\n    setIsEditMode(e.target.checked);\n\n    if (e.target.checked) {\n      orgchart.current.expandAllNodes();\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"edit-chart-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"section\", {\n    className: \"toolbar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"selected-nodes\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    style: {\n      display: \"inline-block\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Selected Node\"), React.createElement(\"input\", {\n    style: {\n      marginLeft: \"1rem\"\n    },\n    id: \"cb-multiple-select\",\n    type: \"checkbox\",\n    checked: isMultipleSelect,\n    onChange: onMultipleSelectChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"cb-multiple-select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"Multiple Select\")), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, Array.from(selectedNodes).map(node => React.createElement(\"li\", {\n    key: node.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, node.name, \" - \", node.title)))), React.createElement(\"div\", {\n    className: \"new-nodes\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"New Node\"), React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"name\",\n    value: newNodeName,\n    onChange: onNameChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"title\",\n    value: newNodeTitle,\n    onChange: onTitleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"action-buttons\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    disabled: !isEditMode,\n    onClick: updateNodes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, \"Update Nodes\"), React.createElement(\"input\", {\n    style: {\n      marginLeft: \"1rem\"\n    },\n    id: \"cb-mode\",\n    type: \"checkbox\",\n    checked: isEditMode,\n    onChange: onModeChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"cb-mode\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, \"Edit Mode\"))), React.createElement(OrganizationChart, {\n    ref: orgchart,\n    datasource: ds,\n    collapsible: !isEditMode,\n    multipleSelect: isMultipleSelect,\n    onClickNode: readSelectedNode,\n    onClickChart: clearSelectedNode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }));\n};\n\nexport default EditNode;","map":{"version":3,"sources":["/home/devenock/Desktop/projects/chRTS/react-orgchart/src/edit-node/edit-node.js"],"names":["React","useRef","useState","JSONDigger","v4","uuidv4","OrganizationChart","EditNode","orgchart","datasource","id","name","title","children","ds","setDS","dsDigger","Set","selectedNodes","setSelectedNodes","newNodeName","setNewNodeName","newNodeTitle","setNewNodeTitle","isEditMode","setIsEditMode","isMultipleSelect","setIsMultipleSelect","readSelectedNode","nodeData","prev","add","clearSelectedNode","onNameChange","e","target","value","onTitleChange","updateNodes","map","node","onMultipleSelectChange","checked","onModeChange","current","expandAllNodes","display","marginLeft","Array","from"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport JSONDigger from \"json-digger\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport OrganizationChart from \"../components/ChartContainer\";\nimport \"./edit-node.css\";\n\nconst EditNode = () => {\n  const orgchart = useRef();\n  const datasource = {\n    id: \"n1\",\n    name: \"Lao Lao\",\n    title: \"general manager\",\n    children: [\n      { id: \"n2\", name: \"Bo Miao\", title: \"department manager\" },\n      {\n        id: \"n3\",\n        name: \"Su Miao\",\n        title: \"department manager\",\n        children: [\n          { id: \"n4\", name: \"Tie Hua\", title: \"senior engineer\" },\n          {\n            id: \"n5\",\n            name: \"Hei Hei\",\n            title: \"senior engineer\",\n            children: [\n              { id: \"n6\", name: \"Dan Dan\", title: \"engineer\" },\n              { id: \"n7\", name: \"Xiang Xiang\", title: \"engineer\" }\n            ]\n          },\n          { id: \"n8\", name: \"Pang Pang\", title: \"senior engineer\" }\n        ]\n      },\n      { id: \"n9\", name: \"Hong Miao\", title: \"department manager\" },\n      {\n        id: \"n10\",\n        name: \"Chun Miao\",\n        title: \"department manager\",\n        children: [{ id: \"n11\", name: \"Yue Yue\", title: \"senior engineer\" }]\n      }\n    ]\n  };\n  const [ds, setDS] = useState(datasource);\n  const dsDigger = new JSONDigger(ds, \"id\", \"children\");\n\n  const [selectedNodes, setSelectedNodes] = useState(new Set());\n  const [newNodeName, setNewNodeName] = useState(\"\");\n  const [newNodeTitle, setNewNodeTitle] = useState(\"\");\n  const [isEditMode, setIsEditMode] = useState(true);\n  const [isMultipleSelect, setIsMultipleSelect] = useState(false);\n\n  const readSelectedNode = nodeData => {\n    if (isMultipleSelect) {\n      setSelectedNodes(prev => new Set(prev.add(nodeData)));\n    } else {\n      setSelectedNodes(new Set([nodeData]));\n    }\n  };\n\n  const clearSelectedNode = () => {\n    setSelectedNodes(new Set());\n  };\n\n  const onNameChange = e => {\n    setNewNodeName(e.target.value);\n  };\n\n  const onTitleChange = e => {\n    setNewNodeTitle(e.target.value);\n  };\n\n  const updateNodes = async () => {\n    await dsDigger.updateNodes([...selectedNodes].map(node => node.id), { id: uuidv4(), name: newNodeName, title: newNodeTitle });\n    setDS({ ...dsDigger.ds });\n  };\n\n  const onMultipleSelectChange = e => {\n    setIsMultipleSelect(e.target.checked);\n  };\n\n  const onModeChange = e => {\n    setIsEditMode(e.target.checked);\n    if (e.target.checked) {\n      orgchart.current.expandAllNodes();\n    }\n  };\n\n  return (\n    <div className=\"edit-chart-wrapper\">\n      <section className=\"toolbar\">\n        <div className=\"selected-nodes\">\n          <div>\n            <h4 style={{ display: \"inline-block\" }}>Selected Node</h4>\n            <input\n              style={{ marginLeft: \"1rem\" }}\n              id=\"cb-multiple-select\"\n              type=\"checkbox\"\n              checked={isMultipleSelect}\n              onChange={onMultipleSelectChange}\n            />\n            <label htmlFor=\"cb-multiple-select\">Multiple Select</label>\n          </div>\n          <ul>\n            {Array.from(selectedNodes).map(node => (\n              <li key={node.id}>\n                {node.name} - {node.title}\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div className=\"new-nodes\">\n          <h4>New Node</h4>\n\n                  <input\n                    type=\"text\"\n                    placeholder=\"name\"\n                    value={newNodeName}\n                    onChange={onNameChange}\n                  />\n                  <input\n                    type=\"text\"\n                    placeholder=\"title\"\n                    value={newNodeTitle}\n                    onChange={onTitleChange}\n                  />\n  \n        </div>\n        <div className=\"action-buttons\">\n          <button disabled={!isEditMode} onClick={updateNodes}>\n            Update Nodes\n          </button>\n          <input\n            style={{ marginLeft: \"1rem\" }}\n            id=\"cb-mode\"\n            type=\"checkbox\"\n            checked={isEditMode}\n            onChange={onModeChange}\n          />\n          <label htmlFor=\"cb-mode\">Edit Mode</label>\n        </div>\n      </section>\n      <OrganizationChart\n        ref={orgchart}\n        datasource={ds}\n        collapsible={!isEditMode}\n        multipleSelect={isMultipleSelect}\n        onClickNode={readSelectedNode}\n        onClickChart={clearSelectedNode}\n      />\n    </div>\n  );\n};\n\nexport default EditNode;\n"]},"metadata":{},"sourceType":"module"}